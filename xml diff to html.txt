import dash
import dash_cytoscape as cyto
import dash_html_components as html
import networkx as nx

app = dash.Dash(__name__)

# Define the nodes and edges of the graph
elements = [
    {'data': {'id': 'A'}},
    {'data': {'id': 'B'}},
    {'data': {'id': 'C'}},
    {'data': {'id': 'D'}},
    {'data': {'id': 'E'}},
    {'data': {'id': 'AB', 'source': 'A', 'target': 'B'}},
    {'data': {'id': 'BC', 'source': 'B', 'target': 'C'}},
    {'data': {'id': 'CD', 'source': 'C', 'target': 'D'}},
    {'data': {'id': 'DE', 'source': 'D', 'target': 'E'}},
    {'data': {'id': 'AC', 'source': 'A', 'target': 'C'}},
    {'data': {'id': 'CE', 'source': 'C', 'target': 'E'}}
]

# Define the styles for the nodes and edges
styles = [
    {
        'selector': 'node',
        'style': {
            'label': 'data(id)',
            'background-color': '#ddd',
            'border-color': '#555',
            'border-width': '1px',
            'width': '50px',
            'height': '50px'
        }
    },
    {
        'selector': 'edge',
        'style': {
            'width': 2,
            'line-color': '#ccc'
        }
    },
]

# Define the layout of the graph
layout = {'name': 'breadthfirst'}

# Create a NetworkX graph from the elements
G = nx.DiGraph()
for element in elements:
    if 'source' in element['data'] and 'target' in element['data']:
        G.add_edge(element['data']['source'], element['data']['target'])

# Define the app layout
app.layout = html.Div([
    cyto.Cytoscape(
        id='cytoscape',
        elements=elements,
        style={'height': '500px'},
        stylesheet=styles,
        layout=layout
    )
])

# Define a callback that highlights the shortest path between two nodes
@app.callback(
    dash.dependencies.Output('cytoscape', 'style'),
    dash.dependencies.Input('cytoscape', 'tapNodeData'),
    dash.dependencies.State('cytoscape', 'elements')
)
def highlight_path(node, elements):
    if node is None:
        return None
    
    source_id = node['id']
    target_id = 'E'
    
    # Use NetworkX to compute the shortest path
    shortest_path = nx.shortest_path(G, source_id, target_id)
    
    # Create a dictionary that maps the node and edge IDs along the shortest path to their respective style objects
    style = {
        node_id: {'background-color': '#0074D9', 'border-color': '#0074D9', 'border-width': '2px'}
        for node_id in shortest_path
    }
    style.update({
        edge: {'line-color': '#0074D9', 'line-width': '3px'}
        for i in range(len(shortest_path)-1)
        for edge in [(shortest_path[i], shortest_path[i+1])]
    })
    
    style_dict = {
        f'#{element["data"]["id"]}': style.get(element['data']['id'], {})
        for element in elements
    }
    
    return style_dict
