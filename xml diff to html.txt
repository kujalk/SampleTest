from xml.dom import minidom

# Parse the first XML file
doc1 = minidom.parse("file1.xml")

# Parse the second XML file
doc2 = minidom.parse("file2.xml")

# Compare the two XML documents
diff = doc1.compareDocumentPosition(doc2)

# Format the diff as an HTML table
html = "<table>"
if diff & doc1.DOCUMENT_POSITION_DISCONNECTED:
    # The documents are not related
    html += "<tr><td>The documents are not related</td></tr>"
if diff & doc1.DOCUMENT_POSITION_PRECEDING:
    # doc1 comes before doc2
    html += "<tr><td>doc1 comes before doc2</td></tr>"
if diff & doc1.DOCUMENT_POSITION_FOLLOWING:
    # doc1 comes after doc2
    html += "<tr><td>doc1 comes after doc2</td></tr>"
if diff & doc1.DOCUMENT_POSITION_CONTAINS:
    # doc1 contains doc2
    html += "<tr><td>doc1 contains doc2</td></tr>"
if diff & doc1.DOCUMENT_POSITION_CONTAINED_BY:
    # doc1 is contained by doc2
    html += "<tr><td>doc1 is contained by doc2</td></tr>"
if diff & doc1.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:
    # The documents are related in an implementation-specific way
    html += "<tr><td>The documents are related in an implementation-specific way</td></tr>"
html += "</table>"

# Save the diff to an HTML file








import difflib
from xml.dom import minidom

# Read the contents of the first XML file
with open("file1.xml") as f:
    xml1 = f.read()

# Parse the first XML file using parseString
doc1 = minidom.parseString(xml1)

# Convert the first XML document to a string
xml1 = doc1.toxml()

# Read the contents of the second XML file
with open("file2.xml") as f:
    xml2 = f.read()

# Parse the second XML file using parseString
doc2 = minidom.parseString(xml2)

# Convert the second XML document to a string
xml2 = doc2.toxml()

# Create a diff
diff = difflib.unified_diff(xml1.splitlines(), xml2.splitlines())

# Format the diff as an HTML table
html = "<table>"











import dash
import dash_cytoscape as cyto
import dash_html_components as html

app = dash.Dash(__name__)

elements = [
    {'data': {'id': 'A'}},
    {'data': {'id': 'B'}},
    {'data': {'id': 'C'}},
    {'data': {'id': 'D'}},
    {'data': {'id': 'E'}},
    {'data': {'id': 'AB', 'source': 'A', 'target': 'B'}},
    {'data': {'id': 'BC', 'source': 'B', 'target': 'C'}},
    {'data': {'id': 'CD', 'source': 'C', 'target': 'D'}},
    {'data': {'id': 'DE', 'source': 'D', 'target': 'E'}},
    {'data': {'id': 'AC', 'source': 'A', 'target': 'C'}},
    {'data': {'id': 'CE', 'source': 'C', 'target': 'E'}}
]

styles = [
    {
        'selector': 'edge',
        'style': {
            'width': 2,
            'line-color': '#ccc'
        }
    }
]

app.layout = html.Div([
    cyto.Cytoscape(
        id='cytoscape',
        elements=elements,
        style={'height': '500px'},
        stylesheet=styles,
        layout={'name': 'breadthfirst'}
    )
])

@app.callback(
    dash.dependencies.Output('cytoscape', 'highlight'),
    dash.dependencies.Input('cytoscape', 'tapNodeData'),
    dash.dependencies.State('cytoscape', 'elements')
)
def highlight_path(node, elements):
    if node is None:
        return None
    
    source_id = node['id']
    target_id = 'E'
    
    # Use breadthfirst layout to get the shortest path between the source and target nodes
    shortest_path = cyto.bfs(source_id, target_id, elements)
    
    # Highlight the nodes and edges along the shortest path
    highlighted = {
        node['id']: {'background-color': '#0074D9', 'border-color': '#0074D9', 'border-width': '2px'}
        for node in shortest_path
    }
    highlighted.update({
        edge['data']['id']: {'line-color': '#0074D9', 'line-width': '3px'}
        for edge in shortest_path[1:]
    })
    
    return highlighted

if __name__ == '__main__':
    app.run_server(debug=True)

for line in diff:
    # Add a row for each line in the diff
    html += "<tr><td>" + line + "</td></tr>"
html += "</table>"

# Save the diff to an HTML file
with open("diff.html", "w") as f:
    f.write(html)

import difflib
import lxml.etree as etree

# Parse the XML files
tree1 = etree.parse("file1.xml")
tree2 = etree.parse("file2.xml")

# Compare the XML trees
diff = difflib.HtmlDiff().make_file(tree1.getroot(), tree2.getroot())

# Save the HTML report to a file
with open("diff.html", "w") as f:
    f.write(diff)
